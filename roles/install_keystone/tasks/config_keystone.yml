---
- name: Check /etc/keystone/keystone.conf.bak existed
  stat:
    path: /etc/keystone/keystone.conf.bak
  register: keystone_conf_bak

- name: Backup file config keystone.conf
  copy:
    src: /etc/keystone/keystone.conf
    dest: /etc/keystone/keystone.conf.bak
    remote_src: yes
  when: 
    - not keystone_conf_bak.stat.exists

- name: Config file keystone.conf
  template:
    src: keystone.conf.j2
    dest: /etc/keystone/keystone.conf
  notify:
    - restart service httpd
    - sleep for 10s and continue with play
    - Create script test system

- name: Sync databases
  shell: su -s /bin/sh -c "keystone-manage db_sync" keystone
  run_once: true
  when: my_action == "deploy"

- name: Initialize Fernet key repositories
  shell: |
    keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
    keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
  when:
    - inventory_hostname_short ==  hostvars[groups['controller'][0]]['inventory_hostname_short']

- name: Copy Fernet key to other node
  shell: |
    scp -r /etc/keystone/credential-keys /etc/keystone/fernet-keys root@{{ hostvars[groups['controller'][1]]['inventory_hostname_short'] }}:/etc/keystone/
    scp -r /etc/keystone/credential-keys /etc/keystone/fernet-keys root@{{ hostvars[groups['controller'][2]]['inventory_hostname_short'] }}:/etc/keystone/
  when: 
    - inventory_hostname_short ==  hostvars[groups['controller'][0]]['inventory_hostname_short']        
    - groups['controller'] | length  > 1  

- name: Chown group, user keystone fernet_key
  file:
    path: "{{ item }}"
    owner: keystone
    group: keystone
    recurse: yes
  with_items:
     - /etc/keystone/credential-keys/
     - /etc/keystone/fernet-keys/
  when:
    - inventory_hostname_short !=  hostvars[groups['controller'][0]]['inventory_hostname_short'] 
    - groups['controller'] | length  > 1